bus_info:
  bustype: socketcan
  channel: vcan0
  bitrate: 125000

emulate_nodes: yes

# enable specific node emulation
emulate_tsi: no
emulate_packs: no
emulate_cockpit: no
emulate_motorcontroller: no

# CAN node ids
can_nodes:
  1: MOTOR
  3: TSI
  4: PACK1
  5: PACK2


# structure of data in PDOs

# NOTE: PDO length cannot exceed 8 bytes, if a 
#       list has less than 8 elements, the remaining
#       bytes will be ignored

process_data:
  # MOTOR:   [ STATUS, DUMMY2, TORQUE, DUMMY4, DUMMY5, DUMMY6, DUMMY7, DUMMY9 ]
  # MOTOR-2: [ MOTOR_TEMP, CONTROLLER_TEMP, DC_LINK_VOLTAGE, WARNING, CURRENT_DEMAND, TEST ]
  # MOTOR-3: [ THROTTLE-byte0, THROTTLE-byte1,  AUX, BRAKE, PHASEB_CURRENT, DUMMY5, DUMMY6, DUMMY7 ]
  # MOTOR-4: [ TORQUE_REGULATOR, FLUX_REGULATOR, VELOCITY ]

### I MADE THEM ALL LOWER CASE FOR CONSISTENCY
## also shoudl we changed MOTOR to MOTOR-1 ??
## WTF IS UP WITH THESE DUMMYS?????

#Harry: I'm correcting this to match setup in configurator
  MOTOR:   [ status-byte0, status-byte1, velocity_filt-byte0, velocity_filt-byte1, velocity_filt-byte2, velocity_filt-byte3]
  MOTOR-2: [ motor_temp, controller_temp, dc_link_voltage-byte0, dc_link_voltage-byte1, warning-byte0, warning-byte1 ]
  MOTOR-3: [ throttle-byte0, throttle-byte1,  aux_voltage-byte0, aux_voltage-byte1, brake_voltage-byte0, brake_voltage-byte1, dummy5, dummy6, dummy7 ]
  MOTOR-4: [ torque_regulator, flux_regulator, velocity ]

  TSI:    [ conditions, 'mc_voltage:raw', 'voltage:raw', 'cooling_temp:raw', 'throttle:raw', 'flow_rate:raw', 'state:int', 'current:raw' ]
  PACK1:  [ voltage, current, state_of_charge_01, state_of_charge_02, temp, 'cells:temp:min', 'cells:temp:avg', 'cells:temp:max' ]
  PACK2:  [ voltage, current, state_of_charge_01, state_of_charge_02, temp, 'cells:temp:min', 'cells:temp:avg', 'cells:temp:max' ]

   


# Other data to keep track of
# need to poll this data manually
# service_data:

#   Cell1Temp:
#     node_id: 2
#     index: 2011
#     poll_rate: 10

#   MotorTemp:
#     node_id: 1
#     index: 2010
#     subindex: 0
#     poll_rate: 0.5

# a list of keys to be ignored by the logger
dont_log: ['*:raw', 'motor:*', 'emulator:*']

sensor_metadata:
    'tsi:throttle':
        unit: 'V'
        oprange: [0, 0, 5, 5]


# \/                             \/
# \/  GUI Configuration Options  \/
# \/                             \/

# NOTE: if sensor is string, it is ignored during update loop
#       if sensor is a list treat first value as the label,
#       second value as the data key, and third value as the unit
#
#       Format for oprange (sensor operating range):
#           [lower_error, lower_warning, upper_warning, upper_error]


Display:
  TSI:
    TractiveSystemVoltage:
      redis_key: 'tsi:voltage'
      unit: 'V'
      oprange: [90, 90, 110, 110]

    MotorControllerVoltage:
      redis_key: 'tsi:mc_voltage'
      unit: 'V'
      oprange: [90, 90, 110, 110]


  Drive States: # List of car drive states that are in the state FSM
    - GLV Off
    - GLV On
    - Precharge
    - TS Energized
    - Ready to Drive
    - AMS Fault
    - IMD Fault
    - Brake Overtravel
  Safety Loop Systems: # All digital systems that can open the safety loop
    - TSI
    - Pack 1
    - Pack 2
    - SCADA
  Safety Loop Nodes: # All nodes on the safety loop that are measurable and reportable to SCADA
    - TSI, S1
    - TSI, S2
    - Pack 1, S1
    - Pack 1, S2
    - Pack 2, S1
    - Pack 2, S2

Sensors: # FOR NEW CONFIG #Maybe a better name would be Output Data Points
  #GLV
  GLV_Voltage:
    data_target: 'glv:voltage' #this does not exist yet
    data_type: 'voltage'
    unit: 'V'
    oprange: [10, 15, 65, 70] #not final
    subsystem: 'GLV'
    input_targets: ['glv:voltage:raw'] #this does not exist yet
    cal_function: 'x0' #not final

  GLV_Current:
    data_target: 'glv:current'
    data_type: 'current'
    unit: 'A'
    oprange: [10, 15, 65, 70] #not final
    subsystem: 'GLV'
    input_targets: ['glv:current:raw'] #this does not exist yet
    cal_function: 'x0' #not final

  GLV_Power:
    data_target: 'glv:power'
    data_type: 'power'
    unit: 'W'
    oprange: [10, 15, 65, 70] #not final
    input_targets: ['glv:current', 'glv:voltage'] #this does not exist yet
    cal_function: 'x0*x1' #not final


  GLV_Temp:
    data_target: 'glv:temp'
    data_type: 'temp'
    unit: 'C'
    oprange: [10, 15, 65, 70] #not final
    input_targets: ['glv:temp:raw'] #this does not exist yet
    cal_function: 'x0' #not final

        
  #TSI
  TSI_Drive_State:
    data_target: 'tsi:state'
    data_type: 'state'
    unit: ''
    oprange: [80, 90, 120, 150]
    subsystem: 'TSI'
    input_targets: ['tsi:state:int'] 
    cal_function: 'x0' #not final

  TSI_MC_Voltage:
    data_target: 'tsi:mc_voltage'
    data_type: 'voltage'
    unit: 'V'
    oprange: []
    subsystem: 'TSI'
    input_targets: ['tsi:mc_voltage:raw'] 
    cal_function: '(((x0/255) * 5) -1.28) *61' 

  TSI_TS_Voltage:
    data_target: 'tsi:voltage'
    data_type: 'voltage'
    unit: 'V'
    oprange: [80, 90, 120, 150]
    open_sloop_out_of_range: no
    subsystem: 'TSI'
    input_targets: ['tsi:voltage:raw'] 
    cal_function: '(((x0/255) * 5) -1.28) *61' 

  TSI_Current:
    data_target: 'tsi:current'
    data_type: 'current'
    unit: 'A'
    oprange: [Null, Null, 250, 300]
    open_sloop_out_of_range: yes
    subsystem: 'TSI'
    input_targets: ['tsi:current:raw'] 
    cal_function: 'x0'

  TSI_Flow_Rate:
    data_target: 'tsi:flow_rate'
    data_type: 'flowRate'
    unit: ''
    oprange: []
    subsystem: 'TSI'
    input_targets: ['tsi:flow_rate:raw'] 
    cal_function: '0.0535 + 757.5 * (1/x0)'

  TSI_Throttle:
    data_target: 'tsi:throttle'
    data_type: 'voltage'
    unit: ''
    oprange: []
    open_sloop_out_of_range: no
    subsystem: 'TSI'
    input_targets: ['tsi:throttle:raw'] 
    cal_function: '(((x0 / 255) * 3.3)*33)/18'
    
#Cooling: *** FULLY NOT DONE YET DIDNT EVEN TOUCH 
## there are no sensors dedicated for these? im confused  
  Cool_Temp1:
    data_target: Null
    data_type: 'temp'
    unit: 'C'
    oprange: []
    open_sloop_out_of_range: no
    subsystem: 'Cooling'

  Cool_Temp2:
    data_target: Null
    data_type: 'temp'
    unit: ''
    oprange: []
    open_sloop_out_of_range: no
    subsystem: 'Cooling'

  Cool_Flow_Rate:
    data_target: Null
    data_type: 'flowRate'
    unit: ''
    oprange: []
    open_sloop_out_of_range: no
    subsystem: 'Cooling'

  Cool_Pump:
    data_target: Null
    data_type: 'pump'
    unit: ''
    oprange: []
    open_sloop_out_of_range: no
    subsystem: 'Cooling'

  Cool_Fan:
    data_target: Null
    data_type: 'velocity'
    unit: 'RPM'
    oprange: []
    open_sloop_out_of_range: no
    subsystem: 'Cooling'
    
  #Motor:
    ## THIS IS ONLY MOTOR-2 ????? WB THE OTHER ONES?????
    ## WHY DATA_TYPE  CAPITALS ??????? not consistent 
    ## Why is there spaces 
  Motor Voltage:
    data_target: 'MOTOR: DC_LINK_VOLTAGE'
    data_type: 'voltage'
    unit: 'V'
    oprange: []
    open_sloop_out_of_range: no
    subsystem: 'Motor'

  Motor Temp:
    data_target: 'MOTOR: MOTOR_TEMP'
    data_type: 'temp'
    unit: 'C'
    oprange: []
    open_sloop_out_of_range: no
    subsystem: 'Motor'

  Motor RPM:
    data_target: 'MOTOR: VELOCITY'
    data_type: 'velocity'
    unit: 'RPM'
    oprange: []
    open_sloop_out_of_range: no
    subsystem: 'Motor'

  Motor Controller Temp:
    data_target: 'MOTOR: CONTROLLER_TEMP'
    data_type: 'temp'
    unit: ''
    oprange: []
    open_sloop_out_of_range: no
    subsystem: 'Motor'

  Motor Throttle:
    data_target: 'SCADA: THROTTLE'
    data_type: 'voltage'
    unit: 'mV'
    oprange: []
    open_sloop_out_of_range: no
    subsystem: 'Motor'



#################################

## I grouped them by Motor Number 

Motor:
## MOTOR 1
  Motor Status:
    data_target: 'motor:status' 
    data_type: 'state' ## idk 
    unit: ''
    oprange: []
    subsystem: 'Motor'
    input_targets: ['motor:status']  ###  motor 1
    cal_function: 'x0' #idk
  
  Motor Torque:
    data_target: 'motor:torque' 
    data_type: 'state' ## idk 
    unit: ''
    oprange: []
    subsystem: 'Motor'
    input_targets: ['motor:torque']  ###  motor 1
    cal_function: 'x0'            # Need to fix 
  
  ## MOTOR 2
  Motor Voltage:
    data_target: 'motor:dc_link_voltage'
    data_type: 'voltage'
    unit: 'V'
    oprange: []
    open_sloop_out_of_range: no
    subsystem: 'Motor'
    input_targets: ['motor-2:dc_link_voltage'] ## motor-2
    cal_function: 'x0'

  Motor Temp:
    data_target: 'motor:motor_temp'
    data_type: 'temp'
    unit: 'C'
    oprange: []
    open_sloop_out_of_range: no
    subsystem: 'Motor'
    input_targets: ['motor-2:motor_temp'] ## motor 2
    cal_function: 'x0'

  Motor Controller Temp:
    data_target: 'motor:controller_temp'
    data_type: 'temp'
    unit: ''
    oprange: []
    open_sloop_out_of_range: no
    subsystem: 'Motor'
    input_targets: ['motor-2:controller_temp'] ###  motor 2 should this be differnt
    cal_function: 'x0'

  Motor Warning:
    data_target: 'motor:warning' 
    data_type: 'state' ## idk 
    unit: ''
    oprange: []
    subsystem: 'Motor'
    input_targets: ['motor-2:warning']  ###  motor 2
    cal_function: 'x0'            # Need to fix 

  Motor Current Demand:
    data_target: 'motor:current_demand' 
    data_type: 'state' ## idk 
    unit: ''
    oprange: []
    subsystem: 'Motor'
    input_targets: ['motor-2:current_demand']  ###  motor 2
    cal_function: 'x0'            # Need to fix 


## motor 3 
  Motor Throttle:
    data_target: 'scada:throttle' ### WHAT IS THIS SCADA:THROTTLE?????
    data_type: 'voltage'
    unit: 'mV'
    oprange: []
    open_sloop_out_of_range: no
    subsystem: 'Motor'
    input_targets: ['motor:throttle-byte0', motor:throttle-byte1]  ###  motor 3
    cal_function: 'x0 * x1 * 256' #taken care of in Cal_funtion 1

  Motor Aux:
    data_target: 'motor:aux' 
    data_type: 'state' ## idk the unit 
    unit: ''
    oprange: []
    subsystem: 'Motor'
    input_targets: ['motor-3:aux']  ###  motor 3
    cal_function: 'x0'            # Need to fix 

  Motor Brake:
    data_target: 'motor:brake' 
    data_type: 'state' ## idk the unit 
    unit: ''
    oprange: []
    subsystem: 'Motor'
    input_targets: ['motor-3:brake']  ###  motor 3
    cal_function: 'x0'            # Need to fix 

  Motor Phaseb Current:
    data_target: 'motor:brake' 
    data_type: 'state' ## idk the unit 
    unit: ''
    oprange: []
    subsystem: 'Motor'
    input_targets: ['motor-3:phaseb_current']  ###  motor 3
    cal_function: 'x0'            # Need to fix 
  
  ## MOTOR 4 
  Motor RPM:
    data_target: 'motor:velocity'
    data_type: 'velocity'
    unit: 'RPM'
    oprange: []
    open_sloop_out_of_range: no
    subsystem: 'Motor'
    input_targets: ['motor-4:velocity'] ###  motor 4??
    cal_function: 'x0'

  Motor Torque Regulator:
    data_target: 'motor:torque_regulator' 
    data_type: 'state' ## idk the unit 
    unit: ''
    oprange: []
    subsystem: 'Motor'
    input_targets: ['motor-4:torque_regulator']  ###  motor 4
    cal_function: 'x0'            # Need to fix 

  Motor Flux Regulator:
    data_target: 'motor:flux_regulator' 
    data_type: 'state' ## idk the unit 
    unit: ''
    oprange: []
    subsystem: 'Motor'
    input_targets: ['motor-4:flux_regulator']  ###  motor 4
    cal_function: 'x0'            # Need to fix 

  Motor Velocity:
    data_target: 'motor:velocity' 
    data_type: 'm/s^2' 
    unit: ''
    oprange: []
    subsystem: 'Motor'
    input_targets: ['motor-4:velocity']  ###  motor 4
    cal_function: 'x0'            # Need to fix 
#############################
    
  #Pack 1:
  Pack 1 SOC:
    data_target: 'PACK1: SOC_1'
    data_type: 'SOC'
    unit: '%'
    oprange: [10, 20, 100, 105]
    open_sloop_out_of_range: no
    subsystem: 'Pack1'
    input_targets: ['PACK1:state_of_charge_01','PACK1:state_of_charge_02']  
    cal_function: 'x0, x1'           

  Pack 1 Voltage:
    data_target: 'PACK1: VOLTAGE'
    data_type: 'voltage'
    unit: 'V'
    oprange: [Null, Null, 250, 300]
    open_sloop_out_of_range: no
    subsystem: 'Pack1'
    input_targets: ['PACK1:voltage']  
    cal_function: 'x0'          

  Pack 1 Current:
    data_target: 'PACK1: CURRENT'
    data_type: 'current'
    unit: 'A'
    oprange: [Null, Null, 250, 300]
    open_sloop_out_of_range: no
    subsystem: 'Pack1'
    input_targets: ['PACK1:current']  
    cal_function: 'x0'  

  Pack 1 Ambient Temp:
    data_target: 'PACK1: AMBIENT_TEMP'
    data_type: 'temp'
    unit: 'C'
    oprange: [Null, Null, 250, 300]
    open_sloop_out_of_range: no
    subsystem: 'Pack1'
    input_targets: ['PACK1:cells:temp:min', 'PACK1:cells:temp:avg', 'PACK1:cells:temp:max']  
    cal_function: '(x0 * (9/5) +32)'
    
  #Pack 2:
  Pack 2 SOC:
    data_target: 'PACK2: SOC_1'
    data_type: 'SOC'
    unit: '%'
    oprange: [10, 20, 100, 105]
    open_sloop_out_of_range: no
    subsystem: 'Pack2'
    input_targets: ['PACK2:state_of_charge_01','PACK2:state_of_charge_02']  
    cal_function: 'x0, x1'   

  Pack 2 Voltage:
    data_target: 'PACK2: VOLTAGE'
    data_type: 'voltage'
    unit: 'V'
    oprange: [Null, Null, 250, 300]
    open_sloop_out_of_range: no
    subsystem: 'Pack2'
    input_targets: ['PACK2:voltage']  
    cal_function: 'x0'  

  Pack 2 Current:
    data_target: 'PACK2: CURRENT'
    data_type: 'current'
    unit: 'A'
    oprange: [Null, Null, 250, 300]
    open_sloop_out_of_range: no
    subsystem: 'Pack2'
    input_targets: ['PACK2:current']  
    cal_function: 'x0'  
    
  Pack 2 Ambient Temp:
    data_target: 'PACK2: AMBIENT_TEMP'
    data_type: 'temp'
    unit: 'C'
    oprange: [Null, Null, 250, 300]
    open_sloop_out_of_range: no
    subsystem: 'Pack2'
    input_targets: ['PACK2:cells:temp:min', 'PACK2:cells:temp:avg', 'PACK2:cells:temp:max']  
    cal_function: '(x0 * (9/5) +32)' ## shoudl we just use the avergae?? 
                                    ## why does he have all 3 ?? 
